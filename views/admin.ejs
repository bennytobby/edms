<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Admin Dashboard - EDMS</title>
    <link rel="stylesheet" href="/styles/main.css" />
  </head>
  <body>
    <header class="topbar">
      <h2>EDMS Admin Dashboard</h2>
      <div class="user-info">
        Welcome, <strong><%= user.firstname %></strong>
        <span class="user-role role-<%= user.role %>"><%= user.role %></span> |
        <a href="/dashboard" class="logout-btn">Back to Dashboard</a> |
        <a href="/logout" class="logout-btn">Logout</a>
      </div>
    </header>

    <main class="container">
      <div class="admin-header">
        <h1>User Management</h1>
        <p>Manage user accounts, roles, and permissions</p>
      </div>

        <div class="admin-stats">
          <div class="stat-card">
            <h3 id="totalUsers"><%= users.length %></h3>
            <p>Total Users</p>
          </div>
          <div class="stat-card">
            <h3 id="adminCount"><%= users.filter(u => u.role === 'admin').length %></h3>
            <p>Admins</p>
          </div>
          <div class="stat-card">
            <h3 id="contributorCount"><%= users.filter(u => u.role === 'contributor').length %></h3>
            <p>Contributors</p>
          </div>
          <div class="stat-card">
            <h3 id="viewerCount"><%= users.filter(u => u.role === 'viewer').length %></h3>
            <p>Viewers</p>
          </div>
        </div>

      <section class="users-section">
        <div class="section-header">
          <h2>All Users</h2>
          <div class="search-controls">
            <input type="text" id="userSearch" placeholder="Search users..." class="search-input">
            <select id="roleFilter" class="filter-select">
              <option value="">All Roles</option>
              <option value="admin">Admins</option>
              <option value="contributor">Contributors</option>
              <option value="viewer">Viewers</option>
            </select>
            <select id="sortFilter" class="filter-select">
              <option value="newest">Newest First</option>
              <option value="oldest">Oldest First</option>
              <option value="name">Name A-Z</option>
              <option value="role">Role</option>
              <option value="email">Email A-Z</option>
            </select>
          </div>
        </div>

        <div class="users-grid">
          <% users.forEach(currentUser => { %>
          <div class="user-card" data-user-id="<%= currentUser.userid %>" data-role="<%= currentUser.role %>" data-name="<%= (currentUser.firstname + ' ' + currentUser.lastname).toLowerCase() %>" data-email="<%= currentUser.email.toLowerCase() %>" data-date="<%= (currentUser.createdAt ? new Date(currentUser.createdAt).getTime() : Date.now()) %>">
            <div class="user-header">
              <div class="user-avatar">
                <%= currentUser.firstname.charAt(0).toUpperCase() %><%= currentUser.lastname.charAt(0).toUpperCase() %>
              </div>
              <div class="user-info">
                <h3><%= currentUser.firstname %> <%= currentUser.lastname %></h3>
                <p class="user-email"><%= currentUser.email %></p>
                <p class="user-id">ID: <%= currentUser.userid %></p>
              </div>
            </div>

            <div class="user-details">
              <div class="user-meta">
                <div class="meta-item">
                  <strong>Role:</strong>
                  <span class="user-role role-<%= currentUser.role %>"><%= currentUser.role %></span>
                </div>
                <div class="meta-item">
                  <strong>Joined:</strong>
                  <%= currentUser.createdAt ? new Date(currentUser.createdAt).toLocaleDateString() : 'Unknown' %>
                </div>
                <% if (currentUser.phone) { %>
                <div class="meta-item">
                  <strong>Phone:</strong>
                  <%= currentUser.phone %>
                </div>
                <% } %>
              </div>
            </div>

            <div class="user-actions">
              <div class="role-controls">
                <label for="role-<%= currentUser.userid %>">Change Role:</label>
                <% if (currentUser.isProtected) { %>
                  <select id="role-<%= currentUser.userid %>" class="role-select disabled" data-user-id="<%= currentUser.userid %>" disabled title="Protected system account - role cannot be changed">
                    <option value="<%= currentUser.role %>" selected><%= currentUser.role.charAt(0).toUpperCase() + currentUser.role.slice(1) %></option>
                  </select>
                  <button class="button primary small update-role-btn disabled" data-user-id="<%= currentUser.userid %>" disabled title="Protected system account - role cannot be changed">
                    Update
                  </button>
                <% } else { %>
                  <select id="role-<%= currentUser.userid %>" class="role-select" data-user-id="<%= currentUser.userid %>">
                    <option value="admin" <%= currentUser.role === 'admin' ? 'selected' : '' %>>Admin</option>
                    <option value="contributor" <%= currentUser.role === 'contributor' ? 'selected' : '' %>>Contributor</option>
                    <option value="viewer" <%= currentUser.role === 'viewer' ? 'selected' : '' %>>Viewer</option>
                  </select>
                  <button class="button primary small update-role-btn" data-user-id="<%= currentUser.userid %>">
                    Update
                  </button>
                <% } %>
              </div>

              <div class="action-buttons">
                <% if (user.userid !== currentUser.userid) { %>
                  <% if (currentUser.isProtected) { %>
                    <button class="button danger small delete-btn disabled" disabled title="Protected system account - cannot be deleted">
                      Delete User
                    </button>
                    <span class="protected-badge">üõ°Ô∏è Protected</span>
                  <% } else { %>
                    <button class="button danger small delete-btn" data-user-id="<%= currentUser.userid %>">
                      Delete User
                    </button>
                  <% } %>
                <% } else { %>
                  <span class="current-user-badge">Current User</span>
                <% } %>
              </div>
            </div>
          </div>
          <% }); %>
        </div>
      </section>
    </main>

    <!-- Confirmation Modal -->
    <div id="confirmModal" class="modal" style="display: none;">
      <div class="modal-content">
        <h3 id="modalTitle">Confirm Action</h3>
        <p id="modalMessage">Are you sure you want to perform this action?</p>
        <div class="modal-actions">
          <button id="confirmBtn" class="button danger">Confirm</button>
          <button id="cancelBtn" class="button secondary">Cancel</button>
        </div>
      </div>
    </div>

    <footer>
      <p>&copy; <%= new Date().getFullYear() %> Paramraj Singh Machre</p>
    </footer>

    <script src="/js/app.js"></script>
    <script>
      // Admin Dashboard JavaScript
      document.addEventListener('DOMContentLoaded', function() {
        initAdminDashboard();
      });

      function initAdminDashboard() {
        // Search functionality
        const searchInput = document.getElementById('userSearch');
        const roleFilter = document.getElementById('roleFilter');
        const sortFilter = document.getElementById('sortFilter');

        searchInput.addEventListener('input', filterUsers);
        roleFilter.addEventListener('change', filterUsers);
        sortFilter.addEventListener('change', sortUsers);

        // Role update functionality
        document.querySelectorAll('.update-role-btn').forEach(btn => {
          btn.addEventListener('click', updateUserRole);
        });


        // Delete user functionality
        document.querySelectorAll('.delete-btn').forEach(btn => {
          btn.addEventListener('click', deleteUser);
        });
      }

      function filterUsers() {
        const searchTerm = document.getElementById('userSearch').value.toLowerCase();
        const roleFilter = document.getElementById('roleFilter').value;
        const userCards = document.querySelectorAll('.user-card');

        userCards.forEach(card => {
          const userName = card.querySelector('h3').textContent.toLowerCase();
          const userEmail = card.querySelector('.user-email').textContent.toLowerCase();
          const userRole = card.dataset.role;

          const matchesSearch = userName.includes(searchTerm) || userEmail.includes(searchTerm);
          const matchesRole = !roleFilter || userRole === roleFilter;

          if (matchesSearch && matchesRole) {
            card.style.display = 'block';
          } else {
            card.style.display = 'none';
          }
        });

        // Re-apply sorting after filtering
        sortUsers();
      }

      function sortUsers() {
        const sortFilter = document.getElementById('sortFilter');
        const sortBy = sortFilter.value;
        const usersGrid = document.querySelector('.users-grid');
        const userCards = Array.from(document.querySelectorAll('.user-card'));

        // Sort the array based on the selected criteria
        userCards.sort((a, b) => {
          switch (sortBy) {
            case 'newest':
              // Handle invalid dates by treating them as oldest (0)
              const dateA = parseInt(a.dataset.date) || 0;
              const dateB = parseInt(b.dataset.date) || 0;
              return dateB - dateA;
            case 'oldest':
              // Handle invalid dates by treating them as oldest (0)
              const dateAOld = parseInt(a.dataset.date) || 0;
              const dateBOld = parseInt(b.dataset.date) || 0;
              return dateAOld - dateBOld;
            case 'name':
              return a.dataset.name.localeCompare(b.dataset.name);
            case 'role':
              return a.dataset.role.localeCompare(b.dataset.role);
            case 'email':
              return a.dataset.email.localeCompare(b.dataset.email);
            default:
              return 0;
          }
        });

        // Re-append sorted cards to the grid
        userCards.forEach(card => {
          usersGrid.appendChild(card);
        });
      }

      async function updateUserRole(event) {
        const userId = event.target.dataset.userId;
        const roleSelect = document.getElementById(`role-${userId}`);

        // Check if the role select is disabled (protected user)
        if (roleSelect.disabled) {
          alert('Cannot modify protected system account');
          return;
        }

        const newRole = roleSelect.value;

        try {
          const response = await fetch('/api/update-user-role', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              userId: userId,
              newRole: newRole
            })
          });

          const result = await response.json();

          if (response.ok) {
            showNotification('User role updated successfully!', 'success');
            // Update the role display
            const userCard = document.querySelector(`[data-user-id="${userId}"]`);
            const roleSpan = userCard.querySelector('.user-role');
            roleSpan.textContent = newRole;
            roleSpan.className = `user-role role-${newRole}`;
            userCard.dataset.role = newRole;

            // Update statistics
            updateStatistics();

            // Re-apply current filter
            filterUsers();
          } else {
            showNotification('Error: ' + result.error, 'error');
          }
        } catch (error) {
          showNotification('Error updating user role: ' + error.message, 'error');
        }
      }


      function deleteUser(event) {
        const userId = event.target.dataset.userId;
        showConfirmModal(
          'Delete User',
          'Are you sure you want to delete this user? This will permanently delete their account and all their files. This action cannot be undone.',
          () => performDeleteUser(userId)
        );
      }

      function showConfirmModal(title, message, onConfirm) {
        const modal = document.getElementById('confirmModal');
        const modalTitle = document.getElementById('modalTitle');
        const modalMessage = document.getElementById('modalMessage');
        const confirmBtn = document.getElementById('confirmBtn');
        const cancelBtn = document.getElementById('cancelBtn');

        modalTitle.textContent = title;
        modalMessage.textContent = message;
        modal.style.display = 'flex';

        // Remove existing event listeners
        confirmBtn.replaceWith(confirmBtn.cloneNode(true));
        cancelBtn.replaceWith(cancelBtn.cloneNode(true));

        // Add new event listeners
        document.getElementById('confirmBtn').addEventListener('click', () => {
          modal.style.display = 'none';
          onConfirm();
        });

        document.getElementById('cancelBtn').addEventListener('click', () => {
          modal.style.display = 'none';
        });
      }


      async function performDeleteUser(userId) {
        try {
          const response = await fetch('/api/delete-user', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ userId: userId })
          });

          const result = await response.json();

          if (response.ok) {
            showNotification('User deleted successfully!', 'success');
            // Remove the user card from the UI
            const userCard = document.querySelector(`[data-user-id="${userId}"]`);
            userCard.remove();

            // Update statistics
            updateStatistics();

            // Re-apply current filter (though user is removed, this ensures consistency)
            filterUsers();
          } else {
            showNotification('Error: ' + result.error, 'error');
          }
        } catch (error) {
          showNotification('Error deleting user: ' + error.message, 'error');
        }
      }

      function updateStatistics() {
        // Count users by role
        const userCards = document.querySelectorAll('.user-card');
        let adminCount = 0;
        let contributorCount = 0;
        let viewerCount = 0;

        userCards.forEach(card => {
          const role = card.dataset.role;
          if (role === 'admin') adminCount++;
          else if (role === 'contributor') contributorCount++;
          else if (role === 'viewer') viewerCount++;
        });

        // Update the statistics display
        document.getElementById('totalUsers').textContent = userCards.length;
        document.getElementById('adminCount').textContent = adminCount;
        document.getElementById('contributorCount').textContent = contributorCount;
        document.getElementById('viewerCount').textContent = viewerCount;
      }
    </script>

    <!-- Preview Modal -->
    <div id="previewModal" class="preview-modal" style="display: none;">
      <div class="modal-content">
        <div class="modal-header">
          <h3 id="previewTitle">File Preview</h3>
          <button class="modal-close" onclick="closePreview()">&times;</button>
        </div>
        <div class="modal-body">
          <div id="previewContent">
            <!-- Preview content will be loaded here -->
          </div>
        </div>
        <div class="modal-footer">
          <button class="button secondary" onclick="closePreview()">Close</button>
          <a id="previewDownload" href="#" class="button primary">Download</a>
        </div>
      </div>
    </div>

    <script src="/js/app.js"></script>
  </body>
</html>
